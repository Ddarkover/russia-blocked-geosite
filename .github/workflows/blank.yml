name: Build Geosite Lists

on:
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild even if no changes'
        required: false
        default: false
        type: boolean
  schedule:
    - cron: "0 3,9,15,21 * * *"
  push:
    branches:
      - master
      - main
    paths-ignore:
      - "**/README.md"
      - "docs/**"
      - ".github/workflows/*.md"

env:
  # URLs для источников данных
  ANTIFILTER_DOWNLOAD: "https://antifilter.download/list/domains.lst"
  ANTIFILTER_DOWNLOAD_COMMUNITY: "https://community.antifilter.download/list/domains.lst"
  REFILTER_ALL: "https://raw.githubusercontent.com/1andrevich/Re-filter-lists/refs/heads/main/domains_all.lst"
  
  # Ad blocking URLs
  PETERLOWE_REJECT_URL: "https://pgl.yoyo.org/adservers/serverlist.php?hostformat=hosts&showintro=1&mimetype=plaintext"
  ADGUARD_DNS_REJECT_URL: "https://adguardteam.github.io/AdGuardSDNSFilter/Filters/filter.txt"
  
  # Windows blocking URLs
  WIN_SPY: "https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/spy.txt"
  WIN_UPDATE: "https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/update.txt"
  WIN_EXTRA: "https://raw.githubusercontent.com/crazy-max/WindowsSpyBlocker/master/data/hosts/extra.txt"
  
  # GFW URLs
  GFW: "https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/refs/heads/release/gfw.txt"
  GREATFIRE: "https://raw.githubusercontent.com/Loyalsoldier/v2ray-rules-dat/refs/heads/release/greatfire.txt"

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: Set dynamic variables
        id: vars
        run: |
          echo "release_name=Released on $(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT
          echo "tag_name=$(date +%Y%m%d%H%M)" >> $GITHUB_OUTPUT
          echo "timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_OUTPUT

      - name: Checkout repositories
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 1

      - name: Checkout additional repositories
        run: |
          # Клонируем все необходимые репозитории параллельно
          git clone --depth=1 https://github.com/Ddarkover/russia-domains-list.git additional &
          git clone --depth=1 https://github.com/Ddarkover/domain-list-custom.git custom &
          git clone --depth=1 https://github.com/v2fly/domain-list-community.git community &
          wait

      - name: Setup Go with caching
        uses: actions/setup-go@v5
        with:
          go-version-file: ./custom/go.mod
          cache: true
          cache-dependency-path: ./custom/go.sum

      - name: Create necessary directories
        run: |
          mkdir -p {temp,publish,community/data-ru}

      - name: Download domain lists
        run: |
          # Функция для безопасного скачивания
          download_with_retry() {
            local url=$1
            local output=$2
            local retries=3
            
            for i in $(seq 1 $retries); do
              if curl -sSL --fail --max-time 30 "$url" -o "$output"; then
                echo "Successfully downloaded: $output"
                return 0
              else
                echo "Attempt $i failed for $url"
                sleep 5
              fi
            done
            
            echo "Failed to download $url after $retries attempts"
            return 1
          }
          
          # Скачиваем основные списки
          download_with_retry "$ANTIFILTER_DOWNLOAD" "./temp/antifilter-download.txt" &
          download_with_retry "$ANTIFILTER_DOWNLOAD_COMMUNITY" "./temp/antifilter-download-community.txt" &
          download_with_retry "$REFILTER_ALL" "./temp/refilter.txt" &
          
          # Скачиваем Windows списки
          download_with_retry "$WIN_SPY" "./temp/win-spy-raw.txt" &
          download_with_retry "$WIN_UPDATE" "./temp/win-update-raw.txt" &
          download_with_retry "$WIN_EXTRA" "./temp/win-extra-raw.txt" &
          
          # Скачиваем GFW списки
          download_with_retry "$GFW" "./temp/gfw.txt" &
          download_with_retry "$GREATFIRE" "./temp/greatfire.txt" &
          
          wait
          
          # Проверяем, что все файлы скачались
          for file in antifilter-download antifilter-download-community refilter win-spy-raw win-update-raw win-extra-raw gfw greatfire; do
            if [[ ! -s "./temp/${file}.txt" ]]; then
              echo "Error: ${file}.txt is empty or missing"
              exit 1
            fi
          done

      - name: Process Windows host files
        run: |
          # Обрабатываем Windows host файлы более эффективно
          process_hosts_file() {
            local input=$1
            local output=$2
            grep "^0\.0\.0\.0" "$input" | awk '{print $2}' | grep -v "^$" > "$output" || touch "$output"
          }
          
          process_hosts_file "./temp/win-spy-raw.txt" "./temp/win-spy.txt"
          process_hosts_file "./temp/win-update-raw.txt" "./temp/win-update.txt"
          process_hosts_file "./temp/win-extra-raw.txt" "./temp/win-extra.txt"

      - name: Prepare community data
        run: |
          # Копируем файлы в community/data
          cp ./temp/{gfw,greatfire,antifilter-download,antifilter-download-community,refilter,win-spy,win-update,win-extra}.txt ./community/data/
          
          # Переименовываем файлы (убираем расширение .txt)
          cd ./community/data
          for f in *.txt; do
            [[ -f "$f" ]] && mv "$f" "${f%.txt}"
          done
          cd ../..
          
          # Копируем дополнительные данные
          find ./additional -name "*.txt" -o -name "*.lst" | while read file; do
            cp "$file" ./community/data/ 2>/dev/null || true
          done

      - name: Build ad block list
        run: |
          {
            # AdGuard DNS список
            curl -sSL --fail "$ADGUARD_DNS_REJECT_URL" | \
            perl -ne '/^\|\|([-_0-9a-zA-Z]+(\.[-_0-9a-zA-Z]+){1,64})\^$/ && print "$1\n"' | \
            perl -ne 'print if not /^[0-9]{1,3}(\.[0-9]{1,3}){3}$/'
            
            # Peter Lowe список
            curl -sSL --fail "$PETERLOWE_REJECT_URL" | \
            perl -ne '/^127\.0\.0\.1\s([-_0-9a-zA-Z]+(\.[-_0-9a-zA-Z]+){1,64})$/ && print "$1\n"'
          } | grep -v "t\.co" | sort -u > ./community/data/category-ads-all

      - name: Build Russia blocking lists
        run: |
          # Основной список блокировок РФ
          cat > ./community/data/ru-blocked << EOF
          include:antifilter-download-community
          include:refilter
          EOF
          
          # Расширенный список блокировок РФ
          cat > ./community/data/ru-blocked-all << EOF
          include:antifilter-download
          include:antifilter-download-community
          include:refilter
          EOF

      - name: Build Russia-only data
        run: |
          # Копируем необходимые файлы для ru-only версии
          cp ./community/data/{category-ads-all,private,ru-available-only-inside,category-gov-ru} ./community/data-ru/ 2>/dev/null || true
          
          # Создаем объединенный список заблокированных доменов
          cat ./community/data/{antifilter-download-community,refilter} | sort -u > ./community/data-ru/ru-blocked

      - name: Build geosite files
        run: |
          cd custom
          
          # Собираем ru-only версию
          go run . \
            --exportlists= \
            --datname=geosite-ru-only.dat \
            --togfwlist=ru-blocked \
            --datapath=../community/data-ru
          
          # Собираем полную версию
          go run . \
            --exportlists=category-ads-all,google,youtube,discord,ru-blocked,ru-blocked-all,private \
            --datapath=../community/data

      - name: Prepare release files
        run: |
          # Копируем собранные .dat файлы
          cp ./custom/publish/geosite-ru-only.dat ./publish/
          cp ./custom/publish/geosite.dat ./publish/
          
          # Копируем текстовые списки
          cp ./temp/{antifilter-download,antifilter-download-community,refilter,win-spy,win-update,win-extra}.txt ./publish/
          
          # Копируем экспортированные списки
          find ./custom/publish -name "*.txt" -exec cp {} ./publish/ \;
          
          # Генерируем хеши
          cd ./publish
          for file in *.dat; do
            [[ -f "$file" ]] && sha256sum "$file" > "${file}.sha256sum"
          done

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: geosite-files-${{ steps.vars.outputs.tag_name }}
          path: ./publish/
          retention-days: 30

      - name: Create release
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.vars.outputs.release_name }}
          tag_name: ${{ steps.vars.outputs.tag_name }}
          body: |
            Автоматическая сборка geosite списков
            
            **Время сборки:** ${{ steps.vars.outputs.timestamp }}
            
            **Включенные файлы:**
            - `geosite.dat` - Полная версия со всеми списками
            - `geosite-ru-only.dat` - Версия только с российскими данными
            - Текстовые списки доменов для ручного использования
            
            **Источники данных:**
            - Antifilter (основной и community)
            - Re-filter lists
            - AdGuard DNS Filter
            - Peter Lowe's Ad and tracking server list
            - Windows Spy Blocker
            - GFW и GreatFire списки
          files: ./publish/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update release branch
        if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
        run: |
          cd publish
          
          # Настраиваем git
          git init
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Создаем коммит
          git checkout -b release
          git add .
          git commit -m "${{ steps.vars.outputs.release_name }}"
          
          # Пушим в release ветку
          git remote add origin "https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}"
          git push -f origin release
